(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{422:function(t,s,a){"use strict";a.r(s);var e=a(62),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"后继者"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#后继者"}},[t._v("#")]),t._v(" 后继者")]),t._v(" "),a("h4",{attrs:{id:"leetcode-04-06"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#leetcode-04-06"}},[t._v("#")]),t._v(" "),a("a",{attrs:{href:"https://leetcode.cn/problems/successor-lcci/",target:"_blank",rel:"noopener noreferrer"}},[t._v("leetcode 04.06"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("设计一个算法，找出二叉搜索树中指定节点的“下一个”节点（也即中序后继）。")]),t._v(" "),a("p",[t._v("如果指定节点没有对应的“下一个”节点，则返回"),a("code",[t._v("null")]),t._v("。")]),t._v(" "),a("p",[a("strong",[t._v("示例：")])]),t._v(" "),a("div",{staticClass:"language-tex extra-class"},[a("pre",{pre:!0,attrs:{class:"language-tex"}},[a("code",[t._v("输入: root = "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("2,1,3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(", p = 1\n\n  2\n / "),a("span",{pre:!0,attrs:{class:"token function selector"}},[t._v("\\\n")]),t._v("1   3\n\n输出: 2\n")])])]),a("p",[a("strong",[t._v("理解：")])]),t._v(" "),a("p",[t._v("1、普通二叉树的下一个节点即中序遍历的下一个值；")]),t._v(" "),a("p",[t._v("2、题目给定二叉搜索树，根据其特点可知找到指定节点的最小的比它大的节点即可。")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("inorderSuccessor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("TreeNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("TreeNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("TreeNode "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    cur "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" root\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" ans "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("TreeNode\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" cur "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" cur"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Val "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Val "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        ans "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cur\n        cur "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cur"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Left\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        cur "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cur"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Right\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" ans\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);